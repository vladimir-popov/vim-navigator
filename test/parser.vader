Given(Markdown buffer):
  -- content --    1
  ### Title 3      2
  -- content --    3
                   4
  ## Title 2       5
  -- content --    6

Execute(Validate sections):
  let parser = navigator#parser#New()
  let parser.example = {
    \   'Begin': { i -> getline(i) =~# '\v^\s*\#+' },
    \   'Fold': { lnum -> len(matchstr(getline(lnum), '\v\#+', 0, 1)) },
    \   'Title': { i -> 'title' }
    \ }

  let expectedItems = [
    \ { 'begin': 2, 'end': 4, 'fold': 3, 'title': 'title', 'type': 'example' },
    \ { 'begin': 5, 'end': 6, 'fold': 2, 'title': 'title', 'type': 'example' },
    \ ]

  AssertEqual expectedItems, parser.parse().list

Given(VimScript like buffer):
  " Description     1
  start             2
    -- content --   3
    start           4
      -- content -- 5
    end             6
    start           7
    end             8
    -- content --   9
  end               10
  -- content --     11

Execute(Validate sections):
  let parser = navigator#parser#New()
  let parser.description = {
    \   'Begin': { i -> getline(i) =~ '\v^"' },
    \   'End': { i -> getline(i + 1) !~ '\v^"' },
    \   'Title': { i -> 'comment' }
    \ }
  let parser.section = {
    \   'Begin': { i -> getline(i) =~ 'start' },
    \   'End': { i -> getline(i) =~ 'end' },
    \   'Title': { i -> join(split(getline(i))) }
    \ }

  let expectedSections = [
    \ {'begin': 1, 'end': 1, 'fold': 1, 'title': 'comment', 'type': 'description' },
    \ {'begin': 2, 'end': 10, 'fold': 2, 'title': 'start 2', 'type': 'section' },
    \ {'begin': 4, 'end': 6, 'fold': 3, 'title': 'start 4', 'type': 'section' },
    \ {'begin': 7, 'end': 8, 'fold': 4, 'title': 'start 7', 'type': 'section' },
    \ ]

  AssertEqual expectedSections, parser.parse().list
